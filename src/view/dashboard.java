/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package view;

import java.awt.*;
import java.awt.event.*;
import java.sql.*;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import model.Database;

/**
 *
 * @author userr
 */
public class dashboard extends javax.swing.JFrame {
    private JPanel sidebarPanel;
    private JPanel contentPanel;
    private JTable dataTable;
    private JScrollPane scrollPane;
    
    /**
     * Creates new form dashboard
     */
    public dashboard() {
        initComponents();
        setupUI();
        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new Dimension(1200, 800));
        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void setupUI() {
        // Set window title
        setTitle("Wellessplate Admin Dashboard");
        
        // Create main container with BorderLayout
        Container container = getContentPane();
        container.setLayout(new BorderLayout());
        
        // Create top navbar with new color scheme
        JPanel navbarPanel = new JPanel();
        navbarPanel.setBackground(new Color(0, 41, 107)); // #00296b
        navbarPanel.setPreferredSize(new Dimension(getWidth(), 60));
        navbarPanel.setLayout(new BorderLayout());
        
        // Add brand name to navbar with updated styling
        JLabel brandLabel = new JLabel("Wellessplate");
        brandLabel.setForeground(Color.WHITE);
        brandLabel.setFont(new Font("Segoe UI", Font.BOLD, 24));
        brandLabel.setBorder(BorderFactory.createEmptyBorder(0, 20, 0, 0));
        navbarPanel.add(brandLabel, BorderLayout.WEST);
        
        // Add back to index button with new styling
        JButton backButton = new JButton("Back to Index");
        backButton.setBackground(new Color(253, 197, 0)); // #fdc500
        backButton.setForeground(new Color(0, 41, 107)); // #00296b
        backButton.setFont(new Font("Segoe UI", Font.BOLD, 12));
        backButton.setBorder(BorderFactory.createEmptyBorder(8, 15, 8, 15));
        backButton.setFocusPainted(false);
        backButton.setCursor(new Cursor(Cursor.HAND_CURSOR));
        backButton.setMargin(new Insets(5, 10, 5, 10));
        navbarPanel.add(backButton, BorderLayout.EAST);
        
        // Create sidebar with updated styling
        sidebarPanel = new JPanel();
        sidebarPanel.setPreferredSize(new Dimension(200, getHeight()));
        sidebarPanel.setBackground(new Color(0, 63, 136)); // #003f88
        sidebarPanel.setLayout(new BoxLayout(sidebarPanel, BoxLayout.Y_AXIS));
        
        // Add menu items to sidebar with new styling
        addSidebarButton("Resep", e -> showResepPanel());
        addSidebarButton("Kategori", e -> showKategoriPanel());
        addSidebarButton("Users", e -> showUsersPanel());
        addSidebarButton("Komentar", e -> showKomentarPanel());
        
        // Create content panel with light background
        contentPanel = new JPanel();
        contentPanel.setLayout(new BorderLayout());
        contentPanel.setBackground(Color.WHITE);
        
        // Add components to main container
        container.add(navbarPanel, BorderLayout.NORTH);
        container.add(sidebarPanel, BorderLayout.WEST);
        container.add(contentPanel, BorderLayout.CENTER);
        
        // Show Resep panel by default
        showResepPanel();
    }
    
    private void addSidebarButton(String text, ActionListener listener) {
        JButton button = new JButton(text);
        button.setMaximumSize(new Dimension(200, 45));
        button.setPreferredSize(new Dimension(200, 45));
        button.setBackground(new Color(0, 63, 136)); // #003f88
        button.setForeground(Color.WHITE);
        button.setFont(new Font("Segoe UI", Font.BOLD, 14));
        button.setBorderPainted(false);
        button.setFocusPainted(false);
        button.setCursor(new Cursor(Cursor.HAND_CURSOR));
        button.addActionListener(listener);
        
        // Add hover effect
        button.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseEntered(MouseEvent e) {
                button.setBackground(new Color(0, 80, 157)); // #00509d
            }
            
            @Override
            public void mouseExited(MouseEvent e) {
                button.setBackground(new Color(0, 63, 136)); // #003f88
            }
        });
        
        sidebarPanel.add(button);
        sidebarPanel.add(Box.createRigidArea(new Dimension(0, 1))); // Add small gap between buttons
    }
    
    private JButton createActionButton(String text) {
        JButton button = new JButton(text);
        button.setBackground(new Color(0, 41, 107)); // #00296b
        button.setForeground(Color.WHITE);
        button.setFont(new Font("Segoe UI", Font.BOLD, 12));
        button.setFocusPainted(false);
        button.setBorderPainted(false);
        button.setCursor(new Cursor(Cursor.HAND_CURSOR));
        button.setMargin(new Insets(8, 15, 8, 15));
        
        // Add hover effect
        button.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseEntered(MouseEvent e) {
                button.setBackground(new Color(0, 80, 157)); // #00509d
            }
            
            @Override
            public void mouseExited(MouseEvent e) {
                button.setBackground(new Color(0, 41, 107)); // #00296b
            }
        });
        
        return button;
    }
    
    private void showResepPanel() {
        contentPanel.removeAll();
        
        // Create top toolbar with updated styling
        JPanel toolbar = new JPanel();
        toolbar.setLayout(new FlowLayout(FlowLayout.LEFT, 10, 10));
        toolbar.setBackground(Color.WHITE);
        toolbar.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));
        
        JButton addButton = createActionButton("Tambah Resep");
        JButton editButton = createActionButton("Edit Resep");
        JButton deleteButton = createActionButton("Hapus Resep");
        
        toolbar.add(addButton);
        toolbar.add(editButton);
        toolbar.add(deleteButton);
        
        // Create table with updated styling
        String[] columns = {"ID", "Judul", "Bahan", "Alat", "Langkah"};
        DefaultTableModel model = new DefaultTableModel(columns, 0);
        dataTable = new JTable(model);
        dataTable.setFont(new Font("Segoe UI", Font.PLAIN, 12));
        dataTable.getTableHeader().setFont(new Font("Segoe UI", Font.BOLD, 12));
        dataTable.getTableHeader().setBackground(new Color(0, 41, 107)); // #00296b
        dataTable.getTableHeader().setForeground(Color.WHITE);
        dataTable.setRowHeight(25);
        dataTable.setGridColor(new Color(230, 230, 230));
        
        scrollPane = new JScrollPane(dataTable);
        scrollPane.setBorder(BorderFactory.createEmptyBorder());
        
        // Load data
        loadResepData();
        
        // Add components with padding
        JPanel contentWrapper = new JPanel(new BorderLayout());
        contentWrapper.setBackground(Color.WHITE);
        contentWrapper.setBorder(BorderFactory.createEmptyBorder(0, 20, 20, 20));
        contentWrapper.add(toolbar, BorderLayout.NORTH);
        contentWrapper.add(scrollPane, BorderLayout.CENTER);
        
        contentPanel.add(contentWrapper);
        
        // Add action listeners
        addButton.addActionListener(e -> showAddResepDialog());
        editButton.addActionListener(e -> showEditResepDialog());
        deleteButton.addActionListener(e -> deleteResep());
        
        contentPanel.revalidate();
        contentPanel.repaint();
    }
    
    private void loadResepData() {
        DefaultTableModel model = (DefaultTableModel) dataTable.getModel();
        model.setRowCount(0);
        
        try (Connection conn = Database.koneksiDatabase();
             Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery("SELECT * FROM resep")) {
            
            while (rs.next()) {
                Object[] row = {
                    rs.getInt("id_resep"),
                    rs.getString("judul"),
                    rs.getString("bahan"),
                    rs.getString("alat"),
                    rs.getString("langkah")
                };
                model.addRow(row);
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error loading data: " + e.getMessage());
        }
    }
    
    private JDialog createStyledDialog(String title) {
        JDialog dialog = new JDialog(this, title, true);
        dialog.setBackground(Color.WHITE);
        dialog.getRootPane().setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));
        return dialog;
    }

    private JButton createDialogButton(String text) {
        JButton button = new JButton(text);
        button.setBackground(new Color(253, 197, 0)); // #fdc500
        button.setForeground(new Color(0, 41, 107)); // #00296b
        button.setFont(new Font("Segoe UI", Font.BOLD, 12));
        button.setFocusPainted(false);
        button.setBorderPainted(false);
        button.setCursor(new Cursor(Cursor.HAND_CURSOR));
        button.setMargin(new Insets(8, 15, 8, 15));
        
        button.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseEntered(MouseEvent e) {
                button.setBackground(new Color(255, 213, 0)); // #ffd500
            }
            
            @Override
            public void mouseExited(MouseEvent e) {
                button.setBackground(new Color(253, 197, 0)); // #fdc500
            }
        });
        
        return button;
    }

    private JLabel createDialogLabel(String text) {
        JLabel label = new JLabel(text);
        label.setFont(new Font("Segoe UI", Font.BOLD, 12));
        label.setForeground(new Color(0, 41, 107)); // #00296b
        return label;
    }

    private JTextField createDialogTextField() {
        JTextField field = new JTextField();
        field.setFont(new Font("Segoe UI", Font.PLAIN, 12));
        field.setBorder(BorderFactory.createCompoundBorder(
            BorderFactory.createLineBorder(new Color(0, 63, 136)), // #003f88
            BorderFactory.createEmptyBorder(5, 5, 5, 5)
        ));
        return field;
    }

    private JTextArea createDialogTextArea() {
        JTextArea area = new JTextArea();
        area.setFont(new Font("Segoe UI", Font.PLAIN, 12));
        area.setLineWrap(true);
        area.setWrapStyleWord(true);
        area.setBorder(BorderFactory.createCompoundBorder(
            BorderFactory.createLineBorder(new Color(0, 63, 136)), // #003f88
            BorderFactory.createEmptyBorder(5, 5, 5, 5)
        ));
        return area;
    }

    private void showAddResepDialog() {
        JDialog dialog = createStyledDialog("Tambah Resep");
        dialog.setLayout(new GridBagLayout());
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.insets = new Insets(5, 5, 5, 5);
        
        JTextField judulField = createDialogTextField();
        JTextField bahanField = createDialogTextField();
        JTextField alatField = createDialogTextField();
        JTextArea langkahArea = createDialogTextArea();
        JScrollPane scrollPane = new JScrollPane(langkahArea);
        scrollPane.setPreferredSize(new Dimension(300, 100));
        
        gbc.gridx = 0; gbc.gridy = 0;
        dialog.add(createDialogLabel("Judul:"), gbc);
        gbc.gridx = 1;
        dialog.add(judulField, gbc);
        
        gbc.gridx = 0; gbc.gridy = 1;
        dialog.add(createDialogLabel("Bahan:"), gbc);
        gbc.gridx = 1;
        dialog.add(bahanField, gbc);
        
        gbc.gridx = 0; gbc.gridy = 2;
        dialog.add(createDialogLabel("Alat:"), gbc);
        gbc.gridx = 1;
        dialog.add(alatField, gbc);
        
        gbc.gridx = 0; gbc.gridy = 3;
        dialog.add(createDialogLabel("Langkah:"), gbc);
        gbc.gridx = 1;
        dialog.add(scrollPane, gbc);
        
        JButton saveButton = createDialogButton("Simpan");
        gbc.gridx = 0; gbc.gridy = 4;
        gbc.gridwidth = 2;
        gbc.anchor = GridBagConstraints.CENTER;
        dialog.add(saveButton, gbc);
        
        saveButton.addActionListener(e -> {
            try (Connection conn = Database.koneksiDatabase();
                 PreparedStatement pstmt = conn.prepareStatement(
                     "INSERT INTO resep (judul, bahan, alat, langkah) VALUES (?, ?, ?, ?)")) {
                
                pstmt.setString(1, judulField.getText());
                pstmt.setString(2, bahanField.getText());
                pstmt.setString(3, alatField.getText());
                pstmt.setString(4, langkahArea.getText());
                pstmt.executeUpdate();
                
                loadResepData();
                dialog.dispose();
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(dialog, "Error saving data: " + ex.getMessage());
            }
        });
        
        dialog.pack();
        dialog.setLocationRelativeTo(this);
        dialog.setVisible(true);
    }
    
    private void showEditResepDialog() {
        int selectedRow = dataTable.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Pilih resep yang akan diedit");
            return;
        }
        
        JDialog dialog = createStyledDialog("Edit Resep");
        dialog.setLayout(new GridBagLayout());
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.insets = new Insets(5, 5, 5, 5);
        
        JTextField judulField = createDialogTextField();
        judulField.setText(dataTable.getValueAt(selectedRow, 1).toString());
        JTextField bahanField = createDialogTextField();
        bahanField.setText(dataTable.getValueAt(selectedRow, 2).toString());
        JTextField alatField = createDialogTextField();
        alatField.setText(dataTable.getValueAt(selectedRow, 3).toString());
        JTextArea langkahArea = createDialogTextArea();
        langkahArea.setText(dataTable.getValueAt(selectedRow, 4).toString());
        JScrollPane scrollPane = new JScrollPane(langkahArea);
        scrollPane.setPreferredSize(new Dimension(300, 100));
        
        gbc.gridx = 0; gbc.gridy = 0;
        dialog.add(createDialogLabel("Judul:"), gbc);
        gbc.gridx = 1;
        dialog.add(judulField, gbc);
        
        gbc.gridx = 0; gbc.gridy = 1;
        dialog.add(createDialogLabel("Bahan:"), gbc);
        gbc.gridx = 1;
        dialog.add(bahanField, gbc);
        
        gbc.gridx = 0; gbc.gridy = 2;
        dialog.add(createDialogLabel("Alat:"), gbc);
        gbc.gridx = 1;
        dialog.add(alatField, gbc);
        
        gbc.gridx = 0; gbc.gridy = 3;
        dialog.add(createDialogLabel("Langkah:"), gbc);
        gbc.gridx = 1;
        dialog.add(scrollPane, gbc);
        
        JButton updateButton = createDialogButton("Update");
        gbc.gridx = 0; gbc.gridy = 4;
        gbc.gridwidth = 2;
        gbc.anchor = GridBagConstraints.CENTER;
        dialog.add(updateButton, gbc);
        
        updateButton.addActionListener(e -> {
            try (Connection conn = Database.koneksiDatabase();
                 PreparedStatement pstmt = conn.prepareStatement(
                     "UPDATE resep SET judul=?, bahan=?, alat=?, langkah=? WHERE id_resep=?")) {
                
                pstmt.setString(1, judulField.getText());
                pstmt.setString(2, bahanField.getText());
                pstmt.setString(3, alatField.getText());
                pstmt.setString(4, langkahArea.getText());
                pstmt.setInt(5, (Integer)dataTable.getValueAt(selectedRow, 0));
                pstmt.executeUpdate();
                
                loadResepData();
                dialog.dispose();
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(dialog, "Error updating data: " + ex.getMessage());
            }
        });
        
        dialog.pack();
        dialog.setLocationRelativeTo(this);
        dialog.setVisible(true);
    }
    
    private void deleteResep() {
        int selectedRow = dataTable.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Pilih resep yang akan dihapus");
            return;
        }
        
        int confirm = JOptionPane.showConfirmDialog(this, 
            "Apakah Anda yakin ingin menghapus resep ini?", 
            "Konfirmasi Hapus", 
            JOptionPane.YES_NO_OPTION);
            
        if (confirm == JOptionPane.YES_OPTION) {
            try (Connection conn = Database.koneksiDatabase();
                 PreparedStatement pstmt = conn.prepareStatement(
                     "DELETE FROM resep WHERE id_resep=?")) {
                
                pstmt.setInt(1, (Integer)dataTable.getValueAt(selectedRow, 0));
                pstmt.executeUpdate();
                
                loadResepData();
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, "Error deleting data: " + ex.getMessage());
            }
        }
    }
    
    private void showKategoriPanel() {
        contentPanel.removeAll();
        
        // Create top toolbar with updated styling
        JPanel toolbar = new JPanel();
        toolbar.setLayout(new FlowLayout(FlowLayout.LEFT, 10, 10));
        toolbar.setBackground(Color.WHITE);
        toolbar.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));
        
        JButton addButton = createActionButton("Tambah Kategori");
        JButton editButton = createActionButton("Edit Kategori");
        JButton deleteButton = createActionButton("Hapus Kategori");
        
        toolbar.add(addButton);
        toolbar.add(editButton);
        toolbar.add(deleteButton);
        
        // Create table with updated styling
        String[] columns = {"ID Resep", "Nama Kategori"};
        DefaultTableModel model = new DefaultTableModel(columns, 0);
        dataTable = new JTable(model);
        dataTable.setFont(new Font("Segoe UI", Font.PLAIN, 12));
        dataTable.getTableHeader().setFont(new Font("Segoe UI", Font.BOLD, 12));
        dataTable.getTableHeader().setBackground(new Color(0, 41, 107)); // #00296b
        dataTable.getTableHeader().setForeground(Color.WHITE);
        dataTable.setRowHeight(25);
        dataTable.setGridColor(new Color(230, 230, 230));
        
        scrollPane = new JScrollPane(dataTable);
        scrollPane.setBorder(BorderFactory.createEmptyBorder());
        
        // Load data
        loadKategoriData();
        
        // Add components with padding
        JPanel contentWrapper = new JPanel(new BorderLayout());
        contentWrapper.setBackground(Color.WHITE);
        contentWrapper.setBorder(BorderFactory.createEmptyBorder(0, 20, 20, 20));
        contentWrapper.add(toolbar, BorderLayout.NORTH);
        contentWrapper.add(scrollPane, BorderLayout.CENTER);
        
        contentPanel.add(contentWrapper);
        
        // Add action listeners
        addButton.addActionListener(e -> showAddKategoriDialog());
        editButton.addActionListener(e -> showEditKategoriDialog());
        deleteButton.addActionListener(e -> deleteKategori());
        
        contentPanel.revalidate();
        contentPanel.repaint();
    }
    
    private void loadKategoriData() {
        DefaultTableModel model = (DefaultTableModel) dataTable.getModel();
        model.setRowCount(0);
        
        try (Connection conn = Database.koneksiDatabase();
             Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery("SELECT * FROM kategori")) {
            
            while (rs.next()) {
                Object[] row = {
                    rs.getInt("id_kategori"),
                    rs.getString("nama_kategori")
                };
                model.addRow(row);
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error loading data: " + e.getMessage());
        }
    }
    
    private void showAddKategoriDialog() {
    JDialog dialog = createStyledDialog("Tambah Kategori");
    dialog.setLayout(new GridBagLayout());
    dialog.setPreferredSize(new Dimension(500, 200));
    GridBagConstraints gbc = new GridBagConstraints();
    gbc.fill = GridBagConstraints.HORIZONTAL;
    gbc.insets = new Insets(5, 5, 5, 5);
    gbc.weightx = 1.0; // Make the text fields take up extra horizontal space
    
    JTextField idResepField = createDialogTextField();
    idResepField.setPreferredSize(new Dimension(400, 30));
    JTextField namaKategoriField = createDialogTextField();
    namaKategoriField.setPreferredSize(new Dimension(400, 30));
        
        gbc.gridx = 0; gbc.gridy = 0;
        dialog.add(createDialogLabel("ID Kategori:"), gbc);
        gbc.gridx = 1;
        dialog.add(idResepField, gbc);
        
        gbc.gridx = 0; gbc.gridy = 1;
        dialog.add(createDialogLabel("Nama Kategori:"), gbc);
        gbc.gridx = 1;
        dialog.add(namaKategoriField, gbc);
        
        JButton saveButton = createDialogButton("Simpan");
        gbc.gridx = 0; gbc.gridy = 2;
        gbc.gridwidth = 2;
        gbc.anchor = GridBagConstraints.CENTER;
        dialog.add(saveButton, gbc);
        
        saveButton.addActionListener(e -> {
            try (Connection conn = Database.koneksiDatabase();
                 PreparedStatement pstmt = conn.prepareStatement(
                     "INSERT INTO kategori (id_kategori, nama_kategori) VALUES (?, ?)")) {
                
                pstmt.setInt(1, Integer.parseInt(idResepField.getText()));
                pstmt.setString(2, namaKategoriField.getText());
                pstmt.executeUpdate();
                
                loadKategoriData();
                dialog.dispose();
            } catch (SQLException | NumberFormatException ex) {
                JOptionPane.showMessageDialog(dialog, "Error saving data: " + ex.getMessage());
            }
        });
        
        dialog.pack();
        dialog.setLocationRelativeTo(this);
        dialog.setVisible(true);
    }
    
    private void showEditKategoriDialog() {
        int selectedRow = dataTable.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Pilih kategori yang akan diedit");
            return;
        }
        
        JDialog dialog = createStyledDialog("Edit Kategori");
        dialog.setLayout(new GridBagLayout());
        dialog.setPreferredSize(new Dimension(500, 200));
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.insets = new Insets(5, 5, 5, 5);
        gbc.weightx = 1.0; // Make the text fields take up extra horizontal space
        
        JTextField idResepField = createDialogTextField();
        idResepField.setText(dataTable.getValueAt(selectedRow, 0).toString());
        JTextField namaKategoriField = createDialogTextField();
        namaKategoriField.setText(dataTable.getValueAt(selectedRow, 1).toString());
        
        gbc.gridx = 0; gbc.gridy = 0;
        dialog.add(createDialogLabel("ID Kategori:"), gbc);
        gbc.gridx = 1;
        dialog.add(idResepField, gbc);
        
        gbc.gridx = 0; gbc.gridy = 1;
        dialog.add(createDialogLabel("Nama Kategori:"), gbc);
        gbc.gridx = 1;
        dialog.add(namaKategoriField, gbc);
        
        JButton updateButton = createDialogButton("Update");
        gbc.gridx = 0; gbc.gridy = 2;
        gbc.gridwidth = 2;
        gbc.anchor = GridBagConstraints.CENTER;
        dialog.add(updateButton, gbc);
        
        updateButton.addActionListener(e -> {
            try (Connection conn = Database.koneksiDatabase();
                 PreparedStatement pstmt = conn.prepareStatement(
                     "UPDATE kategori SET nama_kategori=? WHERE id_kategori=?")) {
                
                pstmt.setString(1, namaKategoriField.getText());
                pstmt.setInt(2, Integer.parseInt(idResepField.getText()));
                pstmt.executeUpdate();
                
                loadKategoriData();
                dialog.dispose();
            } catch (SQLException | NumberFormatException ex) {
                JOptionPane.showMessageDialog(dialog, "Error updating data: " + ex.getMessage());
            }
        });
        
        dialog.pack();
        dialog.setLocationRelativeTo(this);
        dialog.setVisible(true);
    }
    
    private void deleteKategori() {
        int selectedRow = dataTable.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Pilih kategori yang akan dihapus");
            return;
        }
        
        int confirm = JOptionPane.showConfirmDialog(this, 
            "Apakah Anda yakin ingin menghapus kategori ini?", 
            "Konfirmasi Hapus", 
            JOptionPane.YES_NO_OPTION);
            
        if (confirm == JOptionPane.YES_OPTION) {
            try (Connection conn = Database.koneksiDatabase();
                 PreparedStatement pstmt = conn.prepareStatement(
                     "DELETE FROM kategori WHERE id_kategori=?")) {
                
                pstmt.setInt(1, (Integer)dataTable.getValueAt(selectedRow, 0));
                pstmt.executeUpdate();
                
                loadKategoriData();
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, "Error deleting data: " + ex.getMessage());
            }
        }
    }
    
    private void showUsersPanel() {
        contentPanel.removeAll();
        
        // Create top toolbar with updated styling
        JPanel toolbar = new JPanel();
        toolbar.setLayout(new FlowLayout(FlowLayout.LEFT, 10, 10));
        toolbar.setBackground(Color.WHITE);
        toolbar.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));
        
        JButton addButton = createActionButton("Tambah User");
        JButton editButton = createActionButton("Edit User");
        JButton deleteButton = createActionButton("Hapus User");
        
        toolbar.add(addButton);
        toolbar.add(editButton);
        toolbar.add(deleteButton);
        
        // Create table with updated styling
        String[] columns = {"ID", "Nama", "Username", "Email", "Password"};
        DefaultTableModel model = new DefaultTableModel(columns, 0);
        dataTable = new JTable(model);
        dataTable.setFont(new Font("Segoe UI", Font.PLAIN, 12));
        dataTable.getTableHeader().setFont(new Font("Segoe UI", Font.BOLD, 12));
        dataTable.getTableHeader().setBackground(new Color(0, 41, 107)); // #00296b
        dataTable.getTableHeader().setForeground(Color.WHITE);
        dataTable.setRowHeight(25);
        dataTable.setGridColor(new Color(230, 230, 230));
        
        scrollPane = new JScrollPane(dataTable);
        scrollPane.setBorder(BorderFactory.createEmptyBorder());
        
        // Load data
        loadUsersData();
        
        // Add components with padding
        JPanel contentWrapper = new JPanel(new BorderLayout());
        contentWrapper.setBackground(Color.WHITE);
        contentWrapper.setBorder(BorderFactory.createEmptyBorder(0, 20, 20, 20));
        contentWrapper.add(toolbar, BorderLayout.NORTH);
        contentWrapper.add(scrollPane, BorderLayout.CENTER);
        
        contentPanel.add(contentWrapper);
        
        // Add action listeners
        addButton.addActionListener(e -> showAddUserDialog());
        editButton.addActionListener(e -> showEditUserDialog());
        deleteButton.addActionListener(e -> deleteUser());
        
        contentPanel.revalidate();
        contentPanel.repaint();
    }
    
    private void loadUsersData() {
        DefaultTableModel model = (DefaultTableModel) dataTable.getModel();
        model.setRowCount(0);
        
        try (Connection conn = Database.koneksiDatabase();
             Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery("SELECT * FROM user")) {
            
            while (rs.next()) {
                Object[] row = {
                    rs.getInt("id_user"),
                    rs.getString("nama"),
                    rs.getString("username"),
                    rs.getString("email"),
                    rs.getString("password")
                };
                model.addRow(row);
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error loading data: " + e.getMessage());
        }
    }
    
    private void showAddUserDialog() {
    JDialog dialog = createStyledDialog("Tambah User");
    dialog.setLayout(new GridBagLayout());
    dialog.setPreferredSize(new Dimension(450, 300));
    GridBagConstraints gbc = new GridBagConstraints();
    gbc.fill = GridBagConstraints.HORIZONTAL;
    gbc.insets = new Insets(5, 5, 5, 5);
    
    JTextField namaField = createDialogTextField();
    namaField.setPreferredSize(new Dimension(300, 30));
    JTextField usernameField = createDialogTextField();
    usernameField.setPreferredSize(new Dimension(300, 30));
    JTextField emailField = createDialogTextField();
    emailField.setPreferredSize(new Dimension(300, 30));
        JPasswordField passwordField = new JPasswordField();
        passwordField.setBorder(BorderFactory.createCompoundBorder(
            BorderFactory.createLineBorder(new Color(0, 63, 136)), // #003f88
            BorderFactory.createEmptyBorder(5, 5, 5, 5)
        ));
        
        gbc.gridx = 0; gbc.gridy = 0;
        dialog.add(createDialogLabel("Nama:"), gbc);
        gbc.gridx = 1;
        dialog.add(namaField, gbc);
        
        gbc.gridx = 0; gbc.gridy = 1;
        dialog.add(createDialogLabel("Username:"), gbc);
        gbc.gridx = 1;
        dialog.add(usernameField, gbc);
        
        gbc.gridx = 0; gbc.gridy = 2;
        dialog.add(createDialogLabel("Email:"), gbc);
        gbc.gridx = 1;
        dialog.add(emailField, gbc);
        
        gbc.gridx = 0; gbc.gridy = 3;
        dialog.add(createDialogLabel("Password:"), gbc);
        gbc.gridx = 1;
        dialog.add(passwordField, gbc);
        
        JButton saveButton = createDialogButton("Simpan");
        gbc.gridx = 0; gbc.gridy = 4;
        gbc.gridwidth = 2;
        gbc.anchor = GridBagConstraints.CENTER;
        dialog.add(saveButton, gbc);
        
        saveButton.addActionListener(e -> {
            try (Connection conn = Database.koneksiDatabase();
                 PreparedStatement pstmt = conn.prepareStatement(
                     "INSERT INTO user (nama, username, email, password) VALUES (?, ?, ?, ?)")) {
                
                pstmt.setString(1, namaField.getText());
                pstmt.setString(2, usernameField.getText());
                pstmt.setString(3, emailField.getText());
                pstmt.setString(4, new String(passwordField.getPassword()));
                pstmt.executeUpdate();
                
                loadUsersData();
                dialog.dispose();
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(dialog, "Error saving data: " + ex.getMessage());
            }
        });
        
        dialog.pack();
        dialog.setLocationRelativeTo(this);
        dialog.setVisible(true);
    }
    
    private void showEditUserDialog() {
        int selectedRow = dataTable.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Pilih user yang akan diedit");
            return;
        }
        
        JDialog dialog = createStyledDialog("Edit User");
        dialog.setLayout(new GridBagLayout());
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.insets = new Insets(5, 5, 5, 5);
        
        JTextField namaField = createDialogTextField();
        namaField.setText(dataTable.getValueAt(selectedRow, 1).toString());
        JTextField usernameField = createDialogTextField();
        usernameField.setText(dataTable.getValueAt(selectedRow, 2).toString());
        JTextField emailField = createDialogTextField();
        emailField.setText(dataTable.getValueAt(selectedRow, 3).toString());
        JPasswordField passwordField = new JPasswordField(dataTable.getValueAt(selectedRow, 4).toString());
        passwordField.setBorder(BorderFactory.createCompoundBorder(
            BorderFactory.createLineBorder(new Color(0, 63, 136)), // #003f88
            BorderFactory.createEmptyBorder(5, 5, 5, 5)
        ));
        
        gbc.gridx = 0; gbc.gridy = 0;
        dialog.add(createDialogLabel("Nama:"), gbc);
        gbc.gridx = 1;
        dialog.add(namaField, gbc);
        
        gbc.gridx = 0; gbc.gridy = 1;
        dialog.add(createDialogLabel("Username:"), gbc);
        gbc.gridx = 1;
        dialog.add(usernameField, gbc);
        
        gbc.gridx = 0; gbc.gridy = 2;
        dialog.add(createDialogLabel("Email:"), gbc);
        gbc.gridx = 1;
        dialog.add(emailField, gbc);
        
        gbc.gridx = 0; gbc.gridy = 3;
        dialog.add(createDialogLabel("Password:"), gbc);
        gbc.gridx = 1;
        dialog.add(passwordField, gbc);
        
        JButton updateButton = createDialogButton("Update");
        gbc.gridx = 0; gbc.gridy = 4;
        gbc.gridwidth = 2;
        gbc.anchor = GridBagConstraints.CENTER;
        dialog.add(updateButton, gbc);
        
        updateButton.addActionListener(e -> {
            try (Connection conn = Database.koneksiDatabase();
                 PreparedStatement pstmt = conn.prepareStatement(
                     "UPDATE user SET nama=?, username=?, email=?, password=? WHERE id_user=?")) {
                
                pstmt.setString(1, namaField.getText());
                pstmt.setString(2, usernameField.getText());
                pstmt.setString(3, emailField.getText());
                pstmt.setString(4, new String(passwordField.getPassword()));
                pstmt.setInt(5, (Integer)dataTable.getValueAt(selectedRow, 0));
                pstmt.executeUpdate();
                
                loadUsersData();
                dialog.dispose();
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(dialog, "Error updating data: " + ex.getMessage());
            }
        });
        
        dialog.pack();
        dialog.setLocationRelativeTo(this);
        dialog.setVisible(true);
    }
    
    private void deleteUser() {
        int selectedRow = dataTable.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Pilih user yang akan dihapus");
            return;
        }
        
        int confirm = JOptionPane.showConfirmDialog(this, 
            "Apakah Anda yakin ingin menghapus user ini?", 
            "Konfirmasi Hapus", 
            JOptionPane.YES_NO_OPTION);
            
        if (confirm == JOptionPane.YES_OPTION) {
            try (Connection conn = Database.koneksiDatabase();
                 PreparedStatement pstmt = conn.prepareStatement(
                     "DELETE FROM user WHERE id_user=?")) {
                
                pstmt.setInt(1, (Integer)dataTable.getValueAt(selectedRow, 0));
                pstmt.executeUpdate();
                
                loadUsersData();
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, "Error deleting data: " + ex.getMessage());
            }
        }
    }
    
    private void showKomentarPanel() {
        contentPanel.removeAll();
        
        // Create top toolbar with updated styling
        JPanel toolbar = new JPanel();
        toolbar.setLayout(new FlowLayout(FlowLayout.LEFT, 10, 10));
        toolbar.setBackground(Color.WHITE);
        toolbar.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));
        
        JButton addButton = createActionButton("Tambah Komentar");
        JButton editButton = createActionButton("Edit Komentar");
        JButton deleteButton = createActionButton("Hapus Komentar");
        
        toolbar.add(addButton);
        toolbar.add(editButton);
        toolbar.add(deleteButton);
        
        // Create table with updated styling
        String[] columns = {"ID Komentar", "ID User", "Isi Komentar"};
        DefaultTableModel model = new DefaultTableModel(columns, 0);
        dataTable = new JTable(model);
        dataTable.setFont(new Font("Segoe UI", Font.PLAIN, 12));
        dataTable.getTableHeader().setFont(new Font("Segoe UI", Font.BOLD, 12));
        dataTable.getTableHeader().setBackground(new Color(0, 41, 107)); // #00296b
        dataTable.getTableHeader().setForeground(Color.WHITE);
        dataTable.setRowHeight(25);
        dataTable.setGridColor(new Color(230, 230, 230));
        
        scrollPane = new JScrollPane(dataTable);
        scrollPane.setBorder(BorderFactory.createEmptyBorder());
        
        // Load data
        loadKomentarData();
        
        // Add components with padding
        JPanel contentWrapper = new JPanel(new BorderLayout());
        contentWrapper.setBackground(Color.WHITE);
        contentWrapper.setBorder(BorderFactory.createEmptyBorder(0, 20, 20, 20));
        contentWrapper.add(toolbar, BorderLayout.NORTH);
        contentWrapper.add(scrollPane, BorderLayout.CENTER);
        
        contentPanel.add(contentWrapper);
        
        // Add action listeners
        addButton.addActionListener(e -> showAddKomentarDialog());
        editButton.addActionListener(e -> showEditKomentarDialog());
        deleteButton.addActionListener(e -> deleteKomentar());
        
        contentPanel.revalidate();
        contentPanel.repaint();
    }
    
    private void loadKomentarData() {
        DefaultTableModel model = (DefaultTableModel) dataTable.getModel();
        model.setRowCount(0);
        
        try (Connection conn = Database.koneksiDatabase();
             Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery("SELECT * FROM komentar")) {
            
            while (rs.next()) {
                Object[] row = {
                    rs.getInt("id_komentar"),
                    rs.getInt("id_user"),
                    rs.getString("isi_komentar")
                };
                model.addRow(row);
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error loading data: " + e.getMessage());
        }
    }
    
    private void showAddKomentarDialog() {
        JDialog dialog = createStyledDialog("Tambah Komentar");
        dialog.setLayout(new GridBagLayout());
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.insets = new Insets(5, 5, 5, 5);
        
        JTextField idUserField = createDialogTextField();
        JTextArea isiKomentarArea = createDialogTextArea();
        JScrollPane scrollPane = new JScrollPane(isiKomentarArea);
        scrollPane.setPreferredSize(new Dimension(300, 100));
        
        gbc.gridx = 0; gbc.gridy = 0;
        dialog.add(createDialogLabel("ID User:"), gbc);
        gbc.gridx = 1;
        dialog.add(idUserField, gbc);
        
        gbc.gridx = 0; gbc.gridy = 1;
        dialog.add(createDialogLabel("Isi Komentar:"), gbc);
        gbc.gridx = 1;
        dialog.add(scrollPane, gbc);
        
        JButton saveButton = createDialogButton("Simpan");
        gbc.gridx = 0; gbc.gridy = 2;
        gbc.gridwidth = 2;
        gbc.anchor = GridBagConstraints.CENTER;
        dialog.add(saveButton, gbc);
        
        saveButton.addActionListener(e -> {
            try (Connection conn = Database.koneksiDatabase();
                 PreparedStatement pstmt = conn.prepareStatement(
                     "INSERT INTO komentar (id_user, isi_komentar) VALUES (?, ?)")) {
                
                pstmt.setInt(1, Integer.parseInt(idUserField.getText()));
                pstmt.setString(2, isiKomentarArea.getText());
                pstmt.executeUpdate();
                
                loadKomentarData();
                dialog.dispose();
            } catch (SQLException | NumberFormatException ex) {
                JOptionPane.showMessageDialog(dialog, "Error saving data: " + ex.getMessage());
            }
        });
        
        dialog.pack();
        dialog.setLocationRelativeTo(this);
        dialog.setVisible(true);
    }
    
    private void showEditKomentarDialog() {
        int selectedRow = dataTable.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Pilih komentar yang akan diedit");
            return;
        }
        
        JDialog dialog = createStyledDialog("Edit Komentar");
        dialog.setLayout(new GridBagLayout());
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.insets = new Insets(5, 5, 5, 5);
        
        JTextField idUserField = createDialogTextField();
        idUserField.setText(dataTable.getValueAt(selectedRow, 1).toString());
        JTextArea isiKomentarArea = createDialogTextArea();
        isiKomentarArea.setText(dataTable.getValueAt(selectedRow, 2).toString());
        JScrollPane scrollPane = new JScrollPane(isiKomentarArea);
        scrollPane.setPreferredSize(new Dimension(300, 100));
        
        gbc.gridx = 0; gbc.gridy = 0;
        dialog.add(createDialogLabel("ID User:"), gbc);
        gbc.gridx = 1;
        dialog.add(idUserField, gbc);
        
        gbc.gridx = 0; gbc.gridy = 1;
        dialog.add(createDialogLabel("Isi Komentar:"), gbc);
        gbc.gridx = 1;
        dialog.add(scrollPane, gbc);
        
        JButton updateButton = createDialogButton("Update");
        gbc.gridx = 0; gbc.gridy = 2;
        gbc.gridwidth = 2;
        gbc.anchor = GridBagConstraints.CENTER;
        dialog.add(updateButton, gbc);
        
        updateButton.addActionListener(e -> {
            try (Connection conn = Database.koneksiDatabase();
                 PreparedStatement pstmt = conn.prepareStatement(
                     "UPDATE komentar SET id_user=?, isi_komentar=? WHERE id_komentar=?")) {
                
                pstmt.setInt(1, Integer.parseInt(idUserField.getText()));
                pstmt.setString(2, isiKomentarArea.getText());
                pstmt.setInt(3, (Integer)dataTable.getValueAt(selectedRow, 0));
                pstmt.executeUpdate();
                
                loadKomentarData();
                dialog.dispose();
            } catch (SQLException | NumberFormatException ex) {
                JOptionPane.showMessageDialog(dialog, "Error updating data: " + ex.getMessage());
            }
        });
        
        dialog.pack();
        dialog.setLocationRelativeTo(this);
        dialog.setVisible(true);
    }
    
    private void deleteKomentar() {
        int selectedRow = dataTable.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Pilih komentar yang akan dihapus");
            return;
        }
        
        int confirm = JOptionPane.showConfirmDialog(this, 
            "Apakah Anda yakin ingin menghapus komentar ini?", 
            "Konfirmasi Hapus", 
            JOptionPane.YES_NO_OPTION);
            
        if (confirm == JOptionPane.YES_OPTION) {
            try (Connection conn = Database.koneksiDatabase();
                 PreparedStatement pstmt = conn.prepareStatement(
                     "DELETE FROM komentar WHERE id_komentar=?")) {
                
                pstmt.setInt(1, (Integer)dataTable.getValueAt(selectedRow, 0));
                pstmt.executeUpdate();
                
                loadKomentarData();
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, "Error deleting data: " + ex.getMessage());
            }
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    UIManager.setLookAndFeel(info.getClassName());
                    
                    // Customize Nimbus colors to match our theme
                    UIManager.put("nimbusBase", new Color(0, 41, 107)); // #00296b
                    UIManager.put("nimbusBlueGrey", new Color(0, 63, 136)); // #003f88
                    UIManager.put("control", new Color(0, 80, 157)); // #00509d
                    
                    // Set default button colors
                    UIManager.put("Button.background", new Color(253, 197, 0)); // #fdc500
                    UIManager.put("Button.foreground", new Color(0, 41, 107)); // #00296b
                    
                    // Set table header colors
                    UIManager.put("TableHeader.background", new Color(0, 41, 107)); // #00296b
                    UIManager.put("TableHeader.foreground", Color.WHITE);
                    
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(dashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new dashboard().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
