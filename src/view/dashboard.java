/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package view;

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import javax.swing.table.DefaultTableModel;
import java.sql.*;
import model.Database;

/**
 *
 * @author userr
 */
public class dashboard extends javax.swing.JFrame {
    private JPanel sidebarPanel;
    private JPanel contentPanel;
    private JTable dataTable;
    private JScrollPane scrollPane;
    
    /**
     * Creates new form dashboard
     */
    public dashboard() {
        initComponents();
        setupUI();
        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new Dimension(1200, 800));
        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void setupUI() {
        // Set window title
        setTitle("Wellessplate Admin Dashboard");
        
        // Create main container with BorderLayout
        Container container = getContentPane();
        container.setLayout(new BorderLayout());
        
        // Create top navbar
        JPanel navbarPanel = new JPanel();
        navbarPanel.setBackground(new Color(51, 51, 51));
        navbarPanel.setPreferredSize(new Dimension(getWidth(), 60));
        navbarPanel.setLayout(new BorderLayout());
        
        // Add brand name to navbar
        JLabel brandLabel = new JLabel("Wellessplate");
        brandLabel.setForeground(Color.WHITE);
        brandLabel.setFont(new Font("Arial", Font.BOLD, 24));
        brandLabel.setBorder(BorderFactory.createEmptyBorder(0, 20, 0, 0));
        navbarPanel.add(brandLabel, BorderLayout.WEST);
        
        // Add back to index button
        JButton backButton = new JButton("Back to Index");
        backButton.setFocusPainted(false);
        navbarPanel.add(backButton, BorderLayout.EAST);
        
        // Create sidebar
        sidebarPanel = new JPanel();
        sidebarPanel.setPreferredSize(new Dimension(200, getHeight()));
        sidebarPanel.setBackground(new Color(242, 242, 242));
        sidebarPanel.setLayout(new BoxLayout(sidebarPanel, BoxLayout.Y_AXIS));
        
        // Add menu items to sidebar
        addSidebarButton("Resep", e -> showResepPanel());
        addSidebarButton("Kategori", e -> showKategoriPanel());
        addSidebarButton("Users", e -> showUsersPanel());
        addSidebarButton("Komentar", e -> showKomentarPanel());
        
        // Create content panel
        contentPanel = new JPanel();
        contentPanel.setLayout(new BorderLayout());
        contentPanel.setBackground(Color.WHITE);
        
        // Add components to main container
        container.add(navbarPanel, BorderLayout.NORTH);
        container.add(sidebarPanel, BorderLayout.WEST);
        container.add(contentPanel, BorderLayout.CENTER);
        
        // Show Resep panel by default
        showResepPanel();
    }
    
    private void addSidebarButton(String text, ActionListener listener) {
        JButton button = new JButton(text);
        button.setMaximumSize(new Dimension(200, 40));
        button.setPreferredSize(new Dimension(200, 40));
        button.setBackground(new Color(242, 242, 242));
        button.setBorderPainted(false);
        button.setFocusPainted(false);
        button.addActionListener(listener);
        sidebarPanel.add(button);
    }
    
    private void showResepPanel() {
        contentPanel.removeAll();
        
        // Create top toolbar
        JPanel toolbar = new JPanel(new FlowLayout(FlowLayout.LEFT));
        JButton addButton = new JButton("Tambah Resep");
        JButton editButton = new JButton("Edit Resep");
        JButton deleteButton = new JButton("Hapus Resep");
        
        toolbar.add(addButton);
        toolbar.add(editButton);
        toolbar.add(deleteButton);
        
        // Create table
        String[] columns = {"ID", "Judul", "Bahan", "Alat", "Langkah"};
        DefaultTableModel model = new DefaultTableModel(columns, 0);
        dataTable = new JTable(model);
        scrollPane = new JScrollPane(dataTable);
        
        // Load data
        loadResepData();
        
        // Add components
        contentPanel.add(toolbar, BorderLayout.NORTH);
        contentPanel.add(scrollPane, BorderLayout.CENTER);
        
        // Add action listeners
        addButton.addActionListener(e -> showAddResepDialog());
        editButton.addActionListener(e -> showEditResepDialog());
        deleteButton.addActionListener(e -> deleteResep());
        
        contentPanel.revalidate();
        contentPanel.repaint();
    }
    
    private void loadResepData() {
        DefaultTableModel model = (DefaultTableModel) dataTable.getModel();
        model.setRowCount(0);
        
        try (Connection conn = Database.koneksiDatabase();
             Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery("SELECT * FROM resep")) {
            
            while (rs.next()) {
                Object[] row = {
                    rs.getInt("id_resep"),
                    rs.getString("judul"),
                    rs.getString("bahan"),
                    rs.getString("alat"),
                    rs.getString("langkah")
                };
                model.addRow(row);
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error loading data: " + e.getMessage());
        }
    }
    
    private void showAddResepDialog() {
        JDialog dialog = new JDialog(this, "Tambah Resep", true);
        dialog.setLayout(new GridLayout(6, 2, 5, 5));
        
        JTextField judulField = new JTextField();
        JTextField bahanField = new JTextField();
        JTextField alatField = new JTextField();
        JTextArea langkahArea = new JTextArea();
        
        dialog.add(new JLabel("Judul:"));
        dialog.add(judulField);
        dialog.add(new JLabel("Bahan:"));
        dialog.add(bahanField);
        dialog.add(new JLabel("Alat:"));
        dialog.add(alatField);
        dialog.add(new JLabel("Langkah:"));
        dialog.add(new JScrollPane(langkahArea));
        
        JButton saveButton = new JButton("Simpan");
        saveButton.addActionListener(e -> {
            try (Connection conn = Database.koneksiDatabase();
                 PreparedStatement pstmt = conn.prepareStatement(
                     "INSERT INTO resep (judul, bahan, alat, langkah) VALUES (?, ?, ?, ?)")) {
                
                pstmt.setString(1, judulField.getText());
                pstmt.setString(2, bahanField.getText());
                pstmt.setString(3, alatField.getText());
                pstmt.setString(4, langkahArea.getText());
                pstmt.executeUpdate();
                
                loadResepData();
                dialog.dispose();
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(dialog, "Error saving data: " + ex.getMessage());
            }
        });
        
        dialog.add(saveButton);
        dialog.pack();
        dialog.setLocationRelativeTo(this);
        dialog.setVisible(true);
    }
    
    private void showEditResepDialog() {
        int selectedRow = dataTable.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Pilih resep yang akan diedit");
            return;
        }
        
        JDialog dialog = new JDialog(this, "Edit Resep", true);
        dialog.setLayout(new GridLayout(6, 2, 5, 5));
        
        JTextField judulField = new JTextField(dataTable.getValueAt(selectedRow, 1).toString());
        JTextField bahanField = new JTextField(dataTable.getValueAt(selectedRow, 2).toString());
        JTextField alatField = new JTextField(dataTable.getValueAt(selectedRow, 3).toString());
        JTextArea langkahArea = new JTextArea(dataTable.getValueAt(selectedRow, 4).toString());
        
        dialog.add(new JLabel("Judul:"));
        dialog.add(judulField);
        dialog.add(new JLabel("Bahan:"));
        dialog.add(bahanField);
        dialog.add(new JLabel("Alat:"));
        dialog.add(alatField);
        dialog.add(new JLabel("Langkah:"));
        dialog.add(new JScrollPane(langkahArea));
        
        JButton updateButton = new JButton("Update");
        updateButton.addActionListener(e -> {
            try (Connection conn = Database.koneksiDatabase();
                 PreparedStatement pstmt = conn.prepareStatement(
                     "UPDATE resep SET judul=?, bahan=?, alat=?, langkah=? WHERE id_resep=?")) {
                
                pstmt.setString(1, judulField.getText());
                pstmt.setString(2, bahanField.getText());
                pstmt.setString(3, alatField.getText());
                pstmt.setString(4, langkahArea.getText());
                pstmt.setInt(5, (Integer)dataTable.getValueAt(selectedRow, 0));
                pstmt.executeUpdate();
                
                loadResepData();
                dialog.dispose();
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(dialog, "Error updating data: " + ex.getMessage());
            }
        });
        
        dialog.add(updateButton);
        dialog.pack();
        dialog.setLocationRelativeTo(this);
        dialog.setVisible(true);
    }
    
    private void deleteResep() {
        int selectedRow = dataTable.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Pilih resep yang akan dihapus");
            return;
        }
        
        int confirm = JOptionPane.showConfirmDialog(this, 
            "Apakah Anda yakin ingin menghapus resep ini?", 
            "Konfirmasi Hapus", 
            JOptionPane.YES_NO_OPTION);
            
        if (confirm == JOptionPane.YES_OPTION) {
            try (Connection conn = Database.koneksiDatabase();
                 PreparedStatement pstmt = conn.prepareStatement(
                     "DELETE FROM resep WHERE id_resep=?")) {
                
                pstmt.setInt(1, (Integer)dataTable.getValueAt(selectedRow, 0));
                pstmt.executeUpdate();
                
                loadResepData();
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, "Error deleting data: " + ex.getMessage());
            }
        }
    }
    
    private void showKategoriPanel() {
        // Similar implementation for Kategori management
        // Will be implemented when needed
    }
    
    private void showUsersPanel() {
        // Similar implementation for Users management
        // Will be implemented when needed
    }
    
    private void showKomentarPanel() {
        // Similar implementation for Komentar management
        // Will be implemented when needed
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(dashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(dashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(dashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(dashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new dashboard().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
